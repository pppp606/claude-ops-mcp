name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  quality-checks:
    name: Quality Checks
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x, 22.x]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@39370e3970a6d050c480ffad4ff0ed4d3fdee5af # v4.1.0
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          
      - name: Install dependencies
        run: |
          npm ci --legacy-peer-deps
          
      - name: TypeScript type checking
        run: npm run typecheck
        
      - name: ESLint code quality check
        run: npm run lint
        
      - name: Run tests with coverage
        run: npm test -- --coverage --watchAll=false
        
      - name: Build project
        run: npm run build
        
      - name: Upload coverage to Codecov
        if: matrix.node-version == '20.x'
        uses: codecov/codecov-action@9cc74bf7e13a810454a28846494ddbc3795eb693 # v3.1.6
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        
      - name: Setup Node.js
        uses: actions/setup-node@39370e3970a6d050c480ffad4ff0ed4d3fdee5af # v4.1.0
        with:
          node-version: '20.x'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci --legacy-peer-deps
        
      - name: Run security audit
        run: npm audit --audit-level=moderate
        
      - name: Check for outdated dependencies
        run: npm outdated
        continue-on-error: true

  integration-test:
    name: Integration Test
    runs-on: ubuntu-latest
    needs: [quality-checks]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        
      - name: Setup Node.js
        uses: actions/setup-node@39370e3970a6d050c480ffad4ff0ed4d3fdee5af # v4.1.0
        with:
          node-version: '20.x'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci --legacy-peer-deps
        
      - name: Build project
        run: npm run build
        
      - name: Test MCP server startup
        run: |
          # Test server can start without import errors
          node -e "
            const { spawn } = require('child_process');
            const server = spawn('node', ['dist/index.js']);
            let hasError = false;
            
            server.stderr.on('data', (data) => {
              console.log('Server stderr:', data.toString());
              if (data.toString().includes('Error') && !data.toString().includes('shutting down')) {
                hasError = true;
              }
            });
            
            server.stdout.on('data', (data) => {
              console.log('Server stdout:', data.toString());
            });
            
            // Test startup for 3 seconds
            setTimeout(() => {
              console.log('Sending SIGTERM to server...');
              server.kill('SIGTERM');
              
              setTimeout(() => {
                if (hasError) {
                  console.log('❌ Server startup failed with errors');
                  process.exit(1);
                } else {
                  console.log('✅ Server startup test completed successfully');
                  process.exit(0);
                }
              }, 1000);
            }, 3000);
          "
        
      - name: Validate package.json configuration
        run: |
          node -e "
            const pkg = require('./package.json');
            console.log('✓ Package name:', pkg.name);
            console.log('✓ Version:', pkg.version);
            console.log('✓ Main entry:', pkg.main);
            console.log('✓ Binary entry:', pkg.bin);
            if (!pkg.bin || !pkg.bin['claude-ops-mcp']) {
              throw new Error('Binary entry point not configured correctly');
            }
            console.log('✓ Package configuration is valid');
          "

  publish-check:
    name: Publish Check
    runs-on: ubuntu-latest
    needs: [quality-checks, security-audit]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        
      - name: Setup Node.js
        uses: actions/setup-node@39370e3970a6d050c480ffad4ff0ed4d3fdee5af # v4.1.0
        with:
          node-version: '20.x'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci --legacy-peer-deps
        
      - name: Build project
        run: npm run build
        
      - name: Dry-run publish
        run: npm publish --dry-run
        
      - name: Generate build artifacts
        run: |
          mkdir -p artifacts
          cp -r dist artifacts/
          cp package.json artifacts/
          cp README.md artifacts/
          cp LICENSE artifacts/
          
      - name: Upload build artifacts
        uses: actions/upload-artifact@b4b15b8c7c6ac21ea08fcf65892d2ee8f75cf882 # v4.4.3
        with:
          name: build-artifacts
          path: artifacts/
          retention-days: 30